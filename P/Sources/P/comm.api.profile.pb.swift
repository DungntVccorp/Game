/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: comm.api.profile.proto
 *
 */

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _1: SwiftProtobuf.ProtobufAPIVersion_1 {}
  typealias Version = _1
}

fileprivate let _protobuf_package = "Pcomm"

struct Pcomm_KeepAlive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".KeepAlive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = Pcomm_KeepAlive.protoMessageName + ".Request"
    static let _protobuf_nameMap = SwiftProtobuf._NameMap()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let _ = try decoder.nextFieldNumber() {
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      try unknownFields.traverse(visitor: &visitor)
    }

    func _protobuf_generated_isEqualTo(other: Pcomm_KeepAlive.Request) -> Bool {
      if unknownFields != other.unknownFields {return false}
      return true
    }
  }

  struct Reply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = Pcomm_KeepAlive.protoMessageName + ".Reply"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
      1: .same(proto: "apiReply"),
    ]

    private class _StorageClass {
      var _apiReply: Pcomm_ProtocolReply? = nil

      init() {}

      init(copying source: _StorageClass) {
        _apiReply = source._apiReply
      }
    }

    private var _storage = _StorageClass()

    private mutating func _uniqueStorage() -> _StorageClass {
      if !isKnownUniquelyReferenced(&_storage) {
        _storage = _StorageClass(copying: _storage)
      }
      return _storage
    }

    var apiReply: Pcomm_ProtocolReply {
      get {return _storage._apiReply ?? Pcomm_ProtocolReply()}
      set {_uniqueStorage()._apiReply = newValue}
    }
    var hasApiReply: Bool {
      return _storage._apiReply != nil
    }
    mutating func clearApiReply() {
      return _storage._apiReply = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      _ = _uniqueStorage()
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        while let fieldNumber = try decoder.nextFieldNumber() {
          switch fieldNumber {
          case 1: try decoder.decodeSingularMessageField(value: &_storage._apiReply)
          default: break
          }
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        if let v = _storage._apiReply {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        }
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    func _protobuf_generated_isEqualTo(other: Pcomm_KeepAlive.Reply) -> Bool {
      if _storage !== other._storage {
        let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
          if _storage._apiReply != other_storage._apiReply {return false}
          return true
        }
        if !storagesAreEqual {return false}
      }
      if unknownFields != other.unknownFields {return false}
      return true
    }
  }

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Pcomm_KeepAlive) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
