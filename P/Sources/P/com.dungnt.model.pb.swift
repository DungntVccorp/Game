/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: com.dungnt.model.proto
 *
 */

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _1: SwiftProtobuf.ProtobufAPIVersion_1 {}
  typealias Version = _1
}

fileprivate let _protobuf_package = "comm"

struct Comm_Reply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Reply"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
  ]

  var type: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &type)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if type != 0 {
      try visitor.visitSingularInt32Field(value: type, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Comm_Reply) -> Bool {
    if type != other.type {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

struct Comm_Receive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Receive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "time"),
  ]

  var time: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &time)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if time != 0 {
      try visitor.visitSingularInt32Field(value: time, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Comm_Receive) -> Bool {
    if time != other.time {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

struct Comm_Profile: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Profile"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Comm_Profile) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

struct Comm_Login: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Login"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = Comm_Login.protoMessageName + ".request"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
      1: .same(proto: "username"),
      2: .same(proto: "password"),
    ]

    var username: String = ""

    var password: String = ""

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &username)
        case 2: try decoder.decodeSingularStringField(value: &password)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if !username.isEmpty {
        try visitor.visitSingularStringField(value: username, fieldNumber: 1)
      }
      if !password.isEmpty {
        try visitor.visitSingularStringField(value: password, fieldNumber: 2)
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    func _protobuf_generated_isEqualTo(other: Comm_Login.request) -> Bool {
      if username != other.username {return false}
      if password != other.password {return false}
      if unknownFields != other.unknownFields {return false}
      return true
    }
  }

  struct reply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = Comm_Login.protoMessageName + ".reply"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
      1: .same(proto: "type"),
      2: .same(proto: "profile"),
    ]

    private class _StorageClass {
      var _type: Int32 = 0
      var _profile: Comm_Profile? = nil

      init() {}

      init(copying source: _StorageClass) {
        _type = source._type
        _profile = source._profile
      }
    }

    private var _storage = _StorageClass()

    private mutating func _uniqueStorage() -> _StorageClass {
      if !isKnownUniquelyReferenced(&_storage) {
        _storage = _StorageClass(copying: _storage)
      }
      return _storage
    }

    var type: Int32 {
      get {return _storage._type}
      set {_uniqueStorage()._type = newValue}
    }

    var profile: Comm_Profile {
      get {return _storage._profile ?? Comm_Profile()}
      set {_uniqueStorage()._profile = newValue}
    }
    var hasProfile: Bool {
      return _storage._profile != nil
    }
    mutating func clearProfile() {
      return _storage._profile = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      _ = _uniqueStorage()
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        while let fieldNumber = try decoder.nextFieldNumber() {
          switch fieldNumber {
          case 1: try decoder.decodeSingularInt32Field(value: &_storage._type)
          case 2: try decoder.decodeSingularMessageField(value: &_storage._profile)
          default: break
          }
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        if _storage._type != 0 {
          try visitor.visitSingularInt32Field(value: _storage._type, fieldNumber: 1)
        }
        if let v = _storage._profile {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
        }
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    func _protobuf_generated_isEqualTo(other: Comm_Login.reply) -> Bool {
      if _storage !== other._storage {
        let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
          if _storage._type != other_storage._type {return false}
          if _storage._profile != other_storage._profile {return false}
          return true
        }
        if !storagesAreEqual {return false}
      }
      if unknownFields != other.unknownFields {return false}
      return true
    }
  }

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Comm_Login) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
